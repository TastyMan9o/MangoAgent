# -*- coding: utf-8 -*-
"""
agent/prompt/composer_json.py
===========================================================
作用：
  用小模型（DeepSeek）把“主题 + 默认值”生成 **英文 JSON Prompt（v1）**。
  - 输出严格匹配 VideoPromptJSON（Pydantic 校验）
  - 强制使用 .env 中的 DEEPSEEK_API_KEY（不回显、不中途打印）
  - 生成后做“兜底规范化”：name、meta.source/series/created_at 等
"""

import os, json
from datetime import datetime
from typing import Dict, Any
from dotenv import load_dotenv
from openai import OpenAI
from pydantic import ValidationError

from agent.prompt.schema_json import VideoPromptJSON
from agent.utils.io import write_json, ensure_dir

# 预加载 .env
load_dotenv()

def _series_slug(s: str) -> str:
    """把系列名转为安全的目录名（仅小写字母数字与下划线）"""
    return "".join(ch.lower() if ch.isalnum() else "_" for ch in s).strip("_") or "series"

def _ts() -> str:
    """时间戳：YYYYMMDD_HHMM"""
    return datetime.now().strftime("%Y%m%d_%H%M")

def ds_client() -> OpenAI:
    """创建 DeepSeek 客户端（Key 必须写在 .env 的 DEEPSEEK_API_KEY）"""
    key = os.getenv("DEEPSEEK_API_KEY")
    if not key:
        raise RuntimeError("缺少 DEEPSEEK_API_KEY，请在 .env 中设置你的真实 Key。")
    return OpenAI(api_key=key, base_url="https://api.deepseek.com")

# 系统提示词（指导小模型输出严格 JSON）
SYSTEM_MSG = """你是一个严格的 JSON 提示词生成器。
要求：
- 输出必须是一个合法的 JSON 对象，且完全符合给定的 JSON schema（字段、类型）。
- 所有文本字段一律使用英文。
- 合理补充必要的细节；保持安全、干净、无真人面孔。
- 若无特殊说明，aspect_ratio 默认为 16:9，person_generation 为 dont_allow。
"""

# 注意：这里包含 {series_slug} 占位符，下面 .format(...) 会显式传入，避免 KeyError
USER_TMPL = """请基于以下输入，生成一个 VideoPromptJSON 对象（仅返回 JSON 本体）：

INPUT:
- TOPIC (English or Chinese): {topic}
- SERIES NAME: {series}
- DEFAULTS: {defaults}

JSON SCHEMA (fields only, not full definition):
- name: string
- meta: {{ source, topic, series, created_at, parent_prompt_id, notes }}
- veo_params: {{ aspect_ratio, person_generation, negative_prompt }}
- prompt: {{
    concept, shots[], actions[], lighting, style, audio?, 
    timing: {{ duration_seconds, beats[] }}, 
    constraints[]
  }}

规则：
- name 形如 "deepseek_chat/{series_slug}/{{YYYYMMDD_HHMM}}_v1"
- meta.source = "hotspot" 或 "manual"（若 topic 来自人工则用 manual）
- meta.created_at 填当前时间（ISO 8601），parent_prompt_id = null
- timing.beats 要与 duration_seconds 合理一致
- constraints 至少包含：No human faces, No text watermarks, Avoid cartoon rendering
- 返回内容中不要写任何解释或多余文本，只返回 JSON 对象
"""

def compose_v1_json(topic: str, series: str, defaults: Dict[str, Any], source: str = "hotspot",
                    model: str = "deepseek-chat") -> Dict[str, Any]:
    """
    调用小模型生成一个 v1 的英文 JSON Prompt（未落盘）。
    """
    client = ds_client()
    series_slug = _series_slug(series)

    # 把 series_slug 显式传入，避免 KeyError
    user_msg = USER_TMPL.format(
        topic=topic,
        series=series,
        defaults=json.dumps(defaults, ensure_ascii=False),
        series_slug=series_slug
    )

    resp = client.chat.completions.create(
        model=model,
        messages=[{"role": "system", "content": SYSTEM_MSG},
                  {"role": "user", "content": user_msg}],
        temperature=0.3,
    )
    content = resp.choices[0].message.content.strip()

    # 去掉 ```json 围栏（模型有时会自动包裹）
    if content.startswith("```"):
        content = content.strip("`")
        # 兼容可能出现的 ```json 开头
        if content.lower().startswith("json"):
            content = content[4:].strip()
    try:
        obj = json.loads(content)
    except Exception as e:
        raise RuntimeError(f"模型未返回合法 JSON，原始输出：\n{content}") from e

    # 先校验一遍结构
    try:
        _ = VideoPromptJSON(**obj)
    except ValidationError as e:
        raise RuntimeError(f"生成的 JSON 不符合 schema：{e}")

    # ---------------- 兜底规范化（很关键，保证产物可用） ----------------
    # 1) name 如果缺失/不规范，强制修正
    name = (obj.get("name") or "").strip()
    if not name or not name.startswith("deepseek_chat/"):
        obj["name"] = f"deepseek_chat/{series_slug}/{_ts()}_v1"

    # 2) meta 关键字段统一补全与覆盖
    obj.setdefault("meta", {})
    obj["meta"]["source"] = source                   # hotspot / manual
    obj["meta"]["series"] = series                   # 原样记录系列名
    obj["meta"]["topic"] = obj["meta"].get("topic") or topic  # 确保有 topic
    obj["meta"]["created_at"] = obj["meta"].get("created_at") or \
        datetime.now().astimezone().isoformat(timespec="seconds")
    obj["meta"].setdefault("parent_prompt_id", None)

    # 再次校验，确保规范化后仍然满足 schema
    _ = VideoPromptJSON(**obj)

    return obj

def save_v1_json(obj: Dict[str, Any]) -> str:
    """落盘 v1 JSON，返回文件路径（prompts/deepseek_chat/..._v1.json）"""
    name = obj.get("name", "deepseek_chat/untitled/unnamed_v1")
    rel = name.split("/", 1)[-1] + ".json"
    path = os.path.join("prompts", "deepseek_chat", rel)
    ensure_dir(os.path.dirname(path))
    write_json(path, obj)
    return path
