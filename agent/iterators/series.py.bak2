\
# -*- coding: utf-8 -*-
"""
agent/iterators/series.py  （strict_space 调用修正版）
"""

import os, json
from typing import List, Dict, Any
from agent.collectors.bilibili import list_space_videos, fetch_comments, Video
from agent.miners.comments import analyze_comments_to_insight
from agent.iterators.merge_policy import apply_deltas
from agent.prompt.schema_json import VideoPromptJSON
from agent.interactive.refiner import save_refined_version
from agent.iterators.delta_normalizer import normalize_to_visual_deltas

def _load_json(path: str) -> Dict[str, Any]:
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def _extract_deltas_from_insight(insight: Dict[str, Any], top_k: int = 3) -> List[Dict[str, Any]]:
    acts = []
    for t in insight.get("topics", []):
        for a in t.get("actions", []):
            acts.append(a)
    return normalize_to_visual_deltas(acts, top_k=top_k)

def iterate_series_to_new_prompt(base_prompt_path: str,
                                 space_url: str,
                                 filter_keyword: str = "",
                                 limit_videos: int = 3,
                                 max_comments: int = 200,
                                 top_deltas: int = 3) -> str:
    base = _load_json(base_prompt_path)
    _ = VideoPromptJSON(**base)

    # 关键：strict_space=True，确保只拿该空间视频
    videos: List[Video] = list_space_videos(space_url, filter_keyword, limit_videos, strict_space=True)
    if not videos:
        raise RuntimeError("未获取到系列视频，请检查空间链接/关键词/风控。")

    all_deltas: List[Dict[str, Any]] = []
    for v in videos:
        comments = fetch_comments(v.bvid, max_comments=max_comments)
        insight = analyze_comments_to_insight(v, comments)
        all_deltas.extend(_extract_deltas_from_insight(insight, top_k=top_deltas))

    all_deltas = all_deltas[:top_deltas]
    new_json = apply_deltas(base, all_deltas)
    new_path = save_refined_version(new_json, base_json_path=base_prompt_path)
    return new_path
